# Name: Kakashi.py
# Version: 2.0
# Date: 01/24/2022


# Basic
import argparse
import datetime
import logging
import time 
import sys
import re
import os 
from urllib.parse import urljoin

# Specialized
import Team_Seven.Sakura as Sakura
import Team_Seven.Sasuke as Sasuke
import Team_Seven.Naruto as Naruto
import Hostiles.Akatsuki as Akatsuki
import Anbu.Anbu as Anbu


PAKKUN = os.path.exists("slack-bot")
SELF = "Kakashi"
PUBLIC_SELF = "Custom_Python_Script"

NO_FILE = os.path.exists("stats/Pakkun_No.txt")
SCAN_FILE = os.path.exists("stats/Pakkun_Scan.txt")
STAGE2_FILE = os.path.exists("stats/Pakkun_Stage2.txt")
ERROR_FILE = os.path.exists("stats/Pakkun_OoS.txt")

HTTP_PORTS = "80,259,280,443,488,591,593,623,631,664,706,777,808,832,873,1183,1184,2381,2688,2812,2851,3106,3128,3227,3816,4035,4036,4180,4242,4243,4848,4849,5003,5554,5800,5801,5802,5803,5938,5988,5989,5990,6443,6480,6770,6771,6788,6789,6842,7443,7627,7677,8000,8008,8080,8088,8243,8280,8333,8443,8444,8765,8910,8990,8991,9294,9295,9333,9443,9762,9929,10000,16992,16993,18333,19333,20002,20003,24680,25565,27017,27018,27019,27504,28017,6207"

SEARCHED = []
IGNORE_LIST = []

# Pass a hostname through commandline
def main():
    options = get_arg()
    logging.info("Starting Kakashi")

    today = datetime.datetime.now()
    date = stopwatch("Date")
    start = stopwatch("Time")

    if PAKKUN:
        pakkun("Starting Kakashi", SELF, options.whoami)

    if NO_FILE and SCAN_FILE and STAGE2_FILE and ERROR_FILE:
        logging.info("Kakashi: All files exist")
    else:
        pakkun("Kakashi: Missing files", SELF, options.whoami)
        logging.fatal("Kakashi: One or more files are missing...\n\nNo: {}\nScan: {}\nStage2: {}\nError: {}".format(NO_FILE,SCAN_FILE,STAGE2_FILE,ERROR_FILE))
        sys.exit(1)

    if options.task == "Yeet":
        info_targets = "All urls in system"
    elif options.task == "No":
        info_targets = "All urls in system with non-resolvable urls"
    elif options.task == "Scan":
        info_targets = "All urls in system without open ports"
    elif options.task == "Stage2":
        info_targets = "All urls in system with open ports"
    elif options.task == "Anbu":
        info_targets = "Not Applicable. Doing Subdomain enumeration"
    else:
        info_targets = "No targets were selected"

    notes = "Log was generated by {}".format(PUBLIC_SELF)


    if options.task == "Yeet":
        logging.info("Starting all checks")

        pakkun("Starting No check", SELF, options.whoami)
        init_check("No")
        pakkun("Finished No check", SELF, options.whoami)
        scan_type = "Host enumeration"        
        end = stopwatch("Time")

        f = open("Kakashi_L33t_L0g5.csv", "a+")
        f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))

        pakkun("Starting Scan check", SELF, options.whoami)
        init_check("Scan")
        pakkun("Finished Scan check", SELF, options.whoami)
        scan_type = "Port scanning"
        end = stopwatch("Time")

        f = open("Kakashi_L33t_L0g5.csv", "a+")
        f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))

        pakkun("Starting Stage 2 check", SELF, options.whoami)
        init_check("Stage2")
        pakkun("Finished Stage 2 check", SELF, options.whoami)
        scan_type = "Service enumeration"
        end = stopwatch("Time")

        f = open("Kakashi_L33t_L0g5.csv", "a+")
        f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))

        pakkun("Starting Stage 3 check", SELF, options.whoami)
        Akatsuki.check_jinchuriki(EMAIL,PASSW)
        pakkun("Finished Stage 3 check", SELF, options.whoami)
        scan_type = "Service enumeration"
        end = stopwatch("Time")

        f = open("Kakashi_L33t_L0g5.csv", "a+")
        f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))

        scan_type = "Host enumeration | Port scanning | Service enumeration"

    elif options.task == "No":
        logging.info("Starting No check")
        pakkun("Starting No check", SELF, options.whoami)
        init_check("No")
        pakkun("Finished No check", SELF, options.whoami)

        scan_type = "Host enumeration"
        end = stopwatch("Time")

        f = open("Kakashi_L33t_L0g5.csv", "a+")
        f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))

    elif options.task == "Scan":
        logging.info("Starting Scan check")
        pakkun("Starting Scan check", SELF, options.whoami)
        init_check("Scan")
        pakkun("Finished Scan check", SELF, options.whoami)

        scan_type = "Port scanning"
        end = stopwatch("Time")

        f = open("Kakashi_L33t_L0g5.csv", "a+")
        f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))

    elif options.task == "Stage2":
        logging.info("Starting Stage2 check")
        pakkun("Starting Stage 2 check", SELF, options.whoami)
        init_check("Stage2")
        pakkun("Finished Stage 2 check", SELF, options.whoami)

        scan_type = "Service enumeration"
        end = stopwatch("Time")

        f = open("Kakashi_L33t_L0g5.csv", "a+")
        f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))
        
    elif options.task == "Stage3":
        logging.info("Starting Stage3 check")
        pakkun("Starting Stage 3 check", SELF, options.whoami)
        Akatsuki.check_jinchuriki(EMAIL,PASSW)
        pakkun("Finished Stage 3 check", SELF, options.whoami)

        scan_type = "Service enumeration"
        end = stopwatch("Time")

        f = open("Kakashi_L33t_L0g5.csv", "a+")
        f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))

    elif "Anbu" in options.task:
        logging.info("Starting Anbu checks")
        pakkun("Starting Anbu task", SELF, options.whoami)
        Anbu.handler(options.task)
        pakkun("Finished Anbu task", SELF, options.whoami)

        scan_type = "Service enumeration"
        end = stopwatch("Time")

        f = open("Kakashi_L33t_L0g5.csv", "a+")
        f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))

    else:
        logging.info("No task specified")
        pakkun("Nothing selected for Kakashi...", SELF, options.whoami)

    logging.info("Finishing Kakashi. Writing out test log file")
    end = stopwatch("Time")

    f = open("Kakashi_L33t_L0g5.csv", "a+")
    f.write("{},{},{},{},{},{},{},{},{}\n".format("Alex", date, start + " CST", end + " CST", PUBLIC_SELF, scan_type ,info_targets, "python3 {}.py".format(PUBLIC_SELF), notes))
    pakkun("Finished Kakashi", SELF, options.whoami)

    sys.exit(0)


def stopwatch(arg):
    """ Takes an argument and returns the current time in the format you want - 
    "Date":
        ("%m/%d/%y")
    "Time":
        ("%H:%M:%S")
    "File":
        ("%m_%d_%y")
    None or anything else:
        ("%m/%d/%y %H:%M:%S")
    """
    today = datetime.datetime.now()
    if arg == None:
        right_meow = today.strftime("%m/%d/%y %H:%M:%S")
    elif arg == "Date":
        right_meow = today.strftime("%m/%d/%y")
    elif arg == "Time":
        right_meow = today.strftime("%H:%M:%S")
    elif arg == "File":
        right_meow = today.strftime("%m_%d_%y")
    else:
        right_meow = today.strftime("%m/%d/%y %H:%M:%S")

    return right_meow


def init_check(me):
    """ Takes nothing
    Returns nothing
    """

    f = open("stats/Pakkun_{}.txt".format(me), "r")
    file = f.readlines()
    f.close()
    for line in file:
        start = stopwatch(None)
        tic = time.perf_counter()
        if "URL" in line:
            continue
        if not line:
            continue
        url = line.strip()
        url = url.lower()

        logging.debug("Pre check: {}".format(url))
        url2 = re.findall("(.+?\.login\.com)",url)
        if not url2:
            logging.info("Not in scope: {}\n".format(url))
            # Writing to out of scope file
            f = open("stats/Pakkun_OoS.txt", "a+")
            f.write("{}\n".format(url))
            f.close()
            # Writing to log file
            f = open("Kakashi_L33t_Numb3r5.csv", "a+")
            f.write("{},{},{},{},{:0.2f} Seconds,{}\n".format(SELF, url, start, end, (toc - tic), result))
            f.close()            
            continue
        url = url2[0]
        logging.debug("Checking {}".format(url))

        if me == "No":
            result = Sakura.check_resolves(url)
            if result == "Not Resolved":
                logging.info("{} doesn't resolved".format(url))
                f = open("stats/Pakkun_Nope.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()
            elif result == "Resolved":
                logging.info("{} resolved now".format(url))
                f = open("stats/Pakkun_To_Scan.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()
            else:
                logging.info("{} threw up an error".format(url))
                f = open("stats/Pakkun_Error.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()

        elif me == "Scan":
            result = Sasuke.check_open_ports(url,HTTP_PORTS)
            if result[0] == "Down":
                logging.info("{} doesn't resolved still\n".format(url))
                f = open("stats/Pakkun_To_Scan.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()
            elif result[0] == "Not Resolved":
                logging.info("{} doesn't resolved".format(url))
                f = open("stats/Pakkun_Nope.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()
            elif result[0] == "Up":
                logging.info("{} resolved now\n".format(url))
                f = open("stats/Pakkun_To_Stage2.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()
            else:
                logging.info("{} threw up an error:\n{}\n\n".format(url,result))
                f = open("stats/Pakkun_Error.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()

        elif me == "Stage2":
            result = Naruto.check_stage2(url,EMAIL,PASSW)
            if result[0] == "Stable":
                logging.info("{} resolved\n\n".format(url))
                f = open("stats/Pakkun_Stable.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()
            elif result[0] == "Not Resolved":
                logging.info("{} didn't resolve\n\n".format(url))
                f = open("stats/Pakkun_Nope.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()
            elif result[0] == "Manual":
                logging.info("{} needs a manual check (443 isn't up)\n\n".format(url))
                f = open("stats/Pakkun_To_Manual.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()
            else:
                logging.info("{} threw up an error:\n{}\n\n".format(url,result))
                f = open("stats/Pakkun_Error.txt", "a+")
                f.write("{}\n".format(url2[0]))
                f.close()
        
        toc = time.perf_counter()
        end = stopwatch(None)

        f = open("Kakashi_L33t_Numb3r5.csv", "a+")
        f.write("{},{},{},{},{:0.2f} Seconds,{}\n".format(SELF, url2[0], start, end, (toc - tic), result))
        f.close()


def pakkun(message, whoami, location):
    ''' Takes message, whoami, location and reports it to slack '''
    os.system("./slack-bot -m '{}' -w {} -x {} ".format(message,whoami,location))


# This version needs is for list and more complex URLs
def get_arg():
    """ Takes nothing
Purpose: Gets arguments from command line
Returns: Argument's values
"""
    parser = argparse.ArgumentParser()
    # CLI Version
    parser.add_argument("-m","--markdown",dest="markdown",action="store_true",help="Outputs Obsidian instead of csv",default=False)
    parser.add_argument("-d","--debug",dest="debug",action="store_true",help="Turn on debugging",default=False)
    parser.add_argument("-p","--ports",dest="ports",help="Extra port to check",default=False)
    parser.add_argument("-x","--nothing", dest="rip", action="store_true", help="Do not save results", default=False)
    parser.add_argument("-w","--whoami", dest="whoami", help="Who to report as", default="Home")
    parser.add_argument("-t","--task", dest="task", help="Which task to run", default="Yeet")
    # File version
    parser.add_argument("-f","--file",dest="file", help="Name of the file with the URLs")
    parser.add_argument("-e","--email",dest="email", help="Email to log in with on SSO")
    parser.add_argument("-P","--Password",dest="password", help="Password to log in with on SSO")
    
    options = parser.parse_args()
    if not options.file:
        options.file = "urls.txt"
    if not options.email:
        options.email = ""
        global EMAIL
        EMAIL = options.email
    if not options.password:
        options.password = ""
        global PASSW
        PASSW = options.password
    if options.debug:
        logging.basicConfig(level=logging.DEBUG)
        global DEBUG
        DEBUG = True
    else:
        logging.basicConfig(level=logging.INFO)
    return options


if __name__ == "__main__":
    main()
